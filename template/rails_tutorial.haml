/ ~devyn's Rails Tutorial
%h1.title an introduction to rails
#guide
  :redcloth
    So, ya wanna learn Ruby on Rails, do ye? First off, grab the Rails gem:

    <pre><code>
    % [sudo] gem install rails
    </code></pre>

    Then, we create the app.

    <pre><code>
    % rails my-first-app
    % cd my-first-app
    </code></pre>

    You'll get a whole spew of output, then we see that we get a few nice directories, the most important ones being

    * @app@
    * @config@
    * @script@
    * @public@

    We'll be using mostly @app@ and @script@ at the moment. Anyway, let's start off making a simple blog. First, we must create the "post" resource. In Rails, a *resource* is a RESTful combination of a model and a controller. A *model* is an object-oriented form of data, and a *controller* contains a large amount of code logic for the views.

    <pre><code>
    % ./script/generate resource post name:string body:text
    % rake db:migrate
    </code></pre>

    As you hopefully can see, we create the resource "Post" with two properties: name (a short string), and body (a large amount of text). Then, we run @db:migrate@ which puts are tables into the database. Rails' default is SQLite3 (can be changed in @config/database.yml@, more on that later).

    Now, let us modify a few files, so we can have "/posts/" hooked up to show all posts.

    <pre><code>
    # app/controllers/posts.rb
    class PostsController &gt; ActionController::Base
      def index
        @posts = Post.all :order =&gt; "created_at DESC"
      end
    end

    # app/views/posts/index.html.erb
    &lt;% @posts.each do |post| %&gt;
      &lt;div class="post"&gt;
        &lt;h1 class="postName"&gt;&lt;%= h post.name %&gt;&lt;/h1&gt;
        &lt;div class="postBody"&gt;
          &lt;%= RedCloth.new(post.body).to_html %&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;% end %&gt;
    </code></pre>

    I would suggest you look at the @"ActiveRecord::Base":http://api.rubyonrails.org/classes/ActiveRecord/Base.html@ docs.

#TBC
